package com.oops;
//Object orintation : abstarction encapsulation and modulary and hierarchy
// interface and abstract class
//abstract class: incomplete class, and it provide a common hierachy

// Employee: PartTimeEmployee, FullTimeEmployee
class Employee{
	private int id;
	private String name;
	private double salary;
	
	public Employee(int id, String name, double salary) {
		this.id = id;
		this.name = name;
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + "]";
	}
	
}

class FullTimeEmployee extends Employee{
	private double ppf;
	
	public FullTimeEmployee(int id, String name, double salary, double ppf) {
		super(id, name, salary);
		this.ppf = ppf;
	}

	@Override
	public String toString() {
		super.toString();
		return "FullTimeEmployee [ppf=" + ppf + "]";
	}
	

}

class PartTimeEmployee extends Employee{
	
	private int noOfHr;
	private int costOfHr;
	public PartTimeEmployee(int id, String name, double salary, int noOfHr, int costOfHr) {
		super(id, name, salary);
		this.noOfHr = noOfHr;
		this.costOfHr = costOfHr;
	}
	@Override
	public String toString() {
		super.toString();
		return "PartTimeEmployee [noOfHr=" + noOfHr + ", costOfHr=" + costOfHr + "]";
	}
	
	
	
}
public class Demo {
	
	public static void main(String[] args) {
		
	}
}
